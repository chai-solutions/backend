// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (name, email, password)
VALUES ($1, $2, $3)
RETURNING name, email, created_at
`

type CreateAccountParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateAccountRow struct {
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.Email, arg.PasswordHash)
	var i CreateAccountRow
	err := row.Scan(&i.Name, &i.Email, &i.CreatedAt)
	return i, err
}

const selectUserByID = `-- name: SelectUserByID :one
SELECT id, created_at, name, email, password, public_id FROM users u
WHERE u.id = $1
`

func (q *Queries) SelectUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PublicID,
	)
	return i, err
}
