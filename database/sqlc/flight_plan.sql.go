// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flight_plan.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFlightPlan = `-- name: CreateFlightPlan :one
WITH new_flight_plan AS (
    INSERT INTO flight_plans (users)
    VALUES ($1)
    RETURNING id
)
INSERT INTO flight_plan_flights (flight_plan, flight)
SELECT new_flight_plan.id, f.id
FROM flights AS f, new_flight_plan
WHERE f.flight_number = $2
RETURNING flight_plan, flight
`

type CreateFlightPlanParams struct {
	Users        int32  `json:"users"`
	FlightNumber string `json:"flight_number"`
}

type CreateFlightPlanRow struct {
	FlightPlan int32 `json:"flight_plan"`
	Flight     int32 `json:"flight"`
}

func (q *Queries) CreateFlightPlan(ctx context.Context, arg CreateFlightPlanParams) (CreateFlightPlanRow, error) {
	row := q.db.QueryRow(ctx, createFlightPlan, arg.Users, arg.FlightNumber)
	var i CreateFlightPlanRow
	err := row.Scan(&i.FlightPlan, &i.Flight)
	return i, err
}

const getFlightPlan = `-- name: GetFlightPlan :one
SELECT 
    flight_plans.id AS flight_plan_id,
    flights.flight_number,
    dep_airport.name AS departure_airport,
    arr_airport.name AS arrival_airport,
    flights.sched_dep_time,
    flights.sched_arr_time,
    flights.actual_dep_time,
    flights.actual_arr_time
FROM flight_plans
JOIN flight_plan_flights ON flight_plans.id = flight_plan_flights.flight_plan
JOIN flights ON flight_plan_flights.flight = flights.id
JOIN airports AS dep_airport ON flights.dep_airport = dep_airport.id
JOIN airports AS arr_airport ON flights.arr_airport = arr_airport.id
WHERE flight_plans.users = $1 AND flight_plans.id = $2
`

type GetFlightPlanParams struct {
	Users int32 `json:"users"`
	ID    int32 `json:"id"`
}

type GetFlightPlanRow struct {
	FlightPlanID     int32            `json:"flight_plan_id"`
	FlightNumber     string           `json:"flight_number"`
	DepartureAirport string           `json:"departure_airport"`
	ArrivalAirport   string           `json:"arrival_airport"`
	SchedDepTime     pgtype.Timestamp `json:"sched_dep_time"`
	SchedArrTime     pgtype.Timestamp `json:"sched_arr_time"`
	ActualDepTime    pgtype.Timestamp `json:"actual_dep_time"`
	ActualArrTime    pgtype.Timestamp `json:"actual_arr_time"`
}

func (q *Queries) GetFlightPlan(ctx context.Context, arg GetFlightPlanParams) (GetFlightPlanRow, error) {
	row := q.db.QueryRow(ctx, getFlightPlan, arg.Users, arg.ID)
	var i GetFlightPlanRow
	err := row.Scan(
		&i.FlightPlanID,
		&i.FlightNumber,
		&i.DepartureAirport,
		&i.ArrivalAirport,
		&i.SchedDepTime,
		&i.SchedArrTime,
		&i.ActualDepTime,
		&i.ActualArrTime,
	)
	return i, err
}

const getFlightPlans = `-- name: GetFlightPlans :many
SELECT 
    flight_plans.id AS flight_plan_id,
    flights.flight_number,
    dep_airport.name AS departure_airport,
    arr_airport.name AS arrival_airport,
    flights.sched_dep_time,
    flights.sched_arr_time,
    flights.actual_dep_time,
    flights.actual_arr_time
FROM flight_plans
JOIN flight_plan_flights ON flight_plans.id = flight_plan_flights.flight_plan
JOIN flights ON flight_plan_flights.flight = flights.id
JOIN airports AS dep_airport ON flights.dep_airport = dep_airport.id
JOIN airports AS arr_airport ON flights.arr_airport = arr_airport.id
WHERE flight_plans.users = $1
`

type GetFlightPlansRow struct {
	FlightPlanID     int32            `json:"flight_plan_id"`
	FlightNumber     string           `json:"flight_number"`
	DepartureAirport string           `json:"departure_airport"`
	ArrivalAirport   string           `json:"arrival_airport"`
	SchedDepTime     pgtype.Timestamp `json:"sched_dep_time"`
	SchedArrTime     pgtype.Timestamp `json:"sched_arr_time"`
	ActualDepTime    pgtype.Timestamp `json:"actual_dep_time"`
	ActualArrTime    pgtype.Timestamp `json:"actual_arr_time"`
}

func (q *Queries) GetFlightPlans(ctx context.Context, users int32) ([]GetFlightPlansRow, error) {
	rows, err := q.db.Query(ctx, getFlightPlans, users)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFlightPlansRow
	for rows.Next() {
		var i GetFlightPlansRow
		if err := rows.Scan(
			&i.FlightPlanID,
			&i.FlightNumber,
			&i.DepartureAirport,
			&i.ArrivalAirport,
			&i.SchedDepTime,
			&i.SchedArrTime,
			&i.ActualDepTime,
			&i.ActualArrTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
